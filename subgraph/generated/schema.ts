// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Betting extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Betting entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Betting entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Betting", id.toString(), this);
  }

  static load(id: string): Betting | null {
    return store.get("Betting", id) as Betting | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (value === null) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(value as string));
    }
  }

  get isActive(): boolean {
    let value = this.get("isActive");
    return value.toBoolean();
  }

  set isActive(value: boolean) {
    this.set("isActive", Value.fromBoolean(value));
  }

  get winner(): string | null {
    let value = this.get("winner");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set winner(value: string | null) {
    if (value === null) {
      this.unset("winner");
    } else {
      this.set("winner", Value.fromString(value as string));
    }
  }

  get bets(): Array<string> | null {
    let value = this.get("bets");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set bets(value: Array<string> | null) {
    if (value === null) {
      this.unset("bets");
    } else {
      this.set("bets", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Bet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Bet entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Bet entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Bet", id.toString(), this);
  }

  static load(id: string): Bet | null {
    return store.get("Bet", id) as Bet | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get etherAmount(): BigInt | null {
    let value = this.get("etherAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set etherAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("etherAmount");
    } else {
      this.set("etherAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get odd(): BigInt | null {
    let value = this.get("odd");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set odd(value: BigInt | null) {
    if (value === null) {
      this.unset("odd");
    } else {
      this.set("odd", Value.fromBigInt(value as BigInt));
    }
  }

  get teamName(): string | null {
    let value = this.get("teamName");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set teamName(value: string | null) {
    if (value === null) {
      this.unset("teamName");
    } else {
      this.set("teamName", Value.fromString(value as string));
    }
  }

  get nftBettingTicket(): string | null {
    let value = this.get("nftBettingTicket");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nftBettingTicket(value: string | null) {
    if (value === null) {
      this.unset("nftBettingTicket");
    } else {
      this.set("nftBettingTicket", Value.fromString(value as string));
    }
  }

  get chainlinkRequest(): string | null {
    let value = this.get("chainlinkRequest");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set chainlinkRequest(value: string | null) {
    if (value === null) {
      this.unset("chainlinkRequest");
    } else {
      this.set("chainlinkRequest", Value.fromString(value as string));
    }
  }

  get timestamp(): BigInt | null {
    let value = this.get("timestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get isWinningBet(): boolean {
    let value = this.get("isWinningBet");
    return value.toBoolean();
  }

  set isWinningBet(value: boolean) {
    this.set("isWinningBet", Value.fromBoolean(value));
  }

  get cashOutAmount(): BigInt | null {
    let value = this.get("cashOutAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set cashOutAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("cashOutAmount");
    } else {
      this.set("cashOutAmount", Value.fromBigInt(value as BigInt));
    }
  }
}

export class NFTBetTicket extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NFTBetTicket entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NFTBetTicket entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NFTBetTicket", id.toString(), this);
  }

  static load(id: string): NFTBetTicket | null {
    return store.get("NFTBetTicket", id) as NFTBetTicket | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractAddress(): Bytes | null {
    let value = this.get("contractAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set contractAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("contractAddress");
    } else {
      this.set("contractAddress", Value.fromBytes(value as Bytes));
    }
  }

  get tokenId(): BigInt | null {
    let value = this.get("tokenId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt | null) {
    if (value === null) {
      this.unset("tokenId");
    } else {
      this.set("tokenId", Value.fromBigInt(value as BigInt));
    }
  }

  get tokenUri(): Bytes | null {
    let value = this.get("tokenUri");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tokenUri(value: Bytes | null) {
    if (value === null) {
      this.unset("tokenUri");
    } else {
      this.set("tokenUri", Value.fromBytes(value as Bytes));
    }
  }

  get etherAmount(): BigInt | null {
    let value = this.get("etherAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set etherAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("etherAmount");
    } else {
      this.set("etherAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get odd(): BigInt | null {
    let value = this.get("odd");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set odd(value: BigInt | null) {
    if (value === null) {
      this.unset("odd");
    } else {
      this.set("odd", Value.fromBigInt(value as BigInt));
    }
  }

  get teamName(): string | null {
    let value = this.get("teamName");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set teamName(value: string | null) {
    if (value === null) {
      this.unset("teamName");
    } else {
      this.set("teamName", Value.fromString(value as string));
    }
  }

  get creator(): Bytes | null {
    let value = this.get("creator");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes | null) {
    if (value === null) {
      this.unset("creator");
    } else {
      this.set("creator", Value.fromBytes(value as Bytes));
    }
  }
}

export class ChainlinkRequest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ChainlinkRequest entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ChainlinkRequest entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ChainlinkRequest", id.toString(), this);
  }

  static load(id: string): ChainlinkRequest | null {
    return store.get("ChainlinkRequest", id) as ChainlinkRequest | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oracleAddress(): Bytes | null {
    let value = this.get("oracleAddress");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set oracleAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("oracleAddress");
    } else {
      this.set("oracleAddress", Value.fromBytes(value as Bytes));
    }
  }

  get linkFee(): BigInt | null {
    let value = this.get("linkFee");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set linkFee(value: BigInt | null) {
    if (value === null) {
      this.unset("linkFee");
    } else {
      this.set("linkFee", Value.fromBigInt(value as BigInt));
    }
  }

  get requestId(): Bytes | null {
    let value = this.get("requestId");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set requestId(value: Bytes | null) {
    if (value === null) {
      this.unset("requestId");
    } else {
      this.set("requestId", Value.fromBytes(value as Bytes));
    }
  }

  get endpoint(): string | null {
    let value = this.get("endpoint");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set endpoint(value: string | null) {
    if (value === null) {
      this.unset("endpoint");
    } else {
      this.set("endpoint", Value.fromString(value as string));
    }
  }

  get resultOdd(): BigInt | null {
    let value = this.get("resultOdd");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set resultOdd(value: BigInt | null) {
    if (value === null) {
      this.unset("resultOdd");
    } else {
      this.set("resultOdd", Value.fromBigInt(value as BigInt));
    }
  }

  get requestedTimestamp(): BigInt | null {
    let value = this.get("requestedTimestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set requestedTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("requestedTimestamp");
    } else {
      this.set("requestedTimestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get fulfilledTimestamp(): BigInt | null {
    let value = this.get("fulfilledTimestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fulfilledTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("fulfilledTimestamp");
    } else {
      this.set("fulfilledTimestamp", Value.fromBigInt(value as BigInt));
    }
  }

  get canceledTimestamp(): BigInt | null {
    let value = this.get("canceledTimestamp");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set canceledTimestamp(value: BigInt | null) {
    if (value === null) {
      this.unset("canceledTimestamp");
    } else {
      this.set("canceledTimestamp", Value.fromBigInt(value as BigInt));
    }
  }
}
